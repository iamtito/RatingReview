// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/port/service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	model "rating-system/internal/domain/model"
	pagination "rating-system/pkg/pagination"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CreateComment mocks base method.
func (m *MockService) CreateComment(ctx context.Context, userID, reviewID uuid.UUID, content string) (model.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComment", ctx, userID, reviewID, content)
	ret0, _ := ret[0].(model.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateComment indicates an expected call of CreateComment.
func (mr *MockServiceMockRecorder) CreateComment(ctx, userID, reviewID, content interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*MockService)(nil).CreateComment), ctx, userID, reviewID, content)
}

// CreateRating mocks base method.
func (m *MockService) CreateRating(ctx context.Context, userID, serviceID uuid.UUID, score int) (model.Rating, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRating", ctx, userID, serviceID, score)
	ret0, _ := ret[0].(model.Rating)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRating indicates an expected call of CreateRating.
func (mr *MockServiceMockRecorder) CreateRating(ctx, userID, serviceID, score interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRating", reflect.TypeOf((*MockService)(nil).CreateRating), ctx, userID, serviceID, score)
}

// CreateReview mocks base method.
func (m *MockService) CreateReview(ctx context.Context, userID, serviceID, ratingID uuid.UUID, title, content string) (model.Review, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReview", ctx, userID, serviceID, ratingID, title, content)
	ret0, _ := ret[0].(model.Review)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateReview indicates an expected call of CreateReview.
func (mr *MockServiceMockRecorder) CreateReview(ctx, userID, serviceID, ratingID, title, content interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReview", reflect.TypeOf((*MockService)(nil).CreateReview), ctx, userID, serviceID, ratingID, title, content)
}

// GetAverageRating mocks base method.
func (m *MockService) GetAverageRating(ctx context.Context, serviceID uuid.UUID) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAverageRating", ctx, serviceID)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAverageRating indicates an expected call of GetAverageRating.
func (mr *MockServiceMockRecorder) GetAverageRating(ctx, serviceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAverageRating", reflect.TypeOf((*MockService)(nil).GetAverageRating), ctx, serviceID)
}

// GetCommentsByReview mocks base method.
func (m *MockService) GetCommentsByReview(ctx context.Context, reviewID uuid.UUID, params pagination.Params) ([]model.Comment, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentsByReview", ctx, reviewID, params)
	ret0, _ := ret[0].([]model.Comment)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCommentsByReview indicates an expected call of GetCommentsByReview.
func (mr *MockServiceMockRecorder) GetCommentsByReview(ctx, reviewID, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentsByReview", reflect.TypeOf((*MockService)(nil).GetCommentsByReview), ctx, reviewID, params)
}

// GetRatingByUserAndService mocks base method.
func (m *MockService) GetRatingByUserAndService(ctx context.Context, userID, serviceID uuid.UUID) (model.Rating, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRatingByUserAndService", ctx, userID, serviceID)
	ret0, _ := ret[0].(model.Rating)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRatingByUserAndService indicates an expected call of GetRatingByUserAndService.
func (mr *MockServiceMockRecorder) GetRatingByUserAndService(ctx, userID, serviceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRatingByUserAndService", reflect.TypeOf((*MockService)(nil).GetRatingByUserAndService), ctx, userID, serviceID)
}

// GetRatingsByService mocks base method.
func (m *MockService) GetRatingsByService(ctx context.Context, serviceID uuid.UUID, params pagination.Params) ([]model.Rating, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRatingsByService", ctx, serviceID, params)
	ret0, _ := ret[0].([]model.Rating)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRatingsByService indicates an expected call of GetRatingsByService.
func (mr *MockServiceMockRecorder) GetRatingsByService(ctx, serviceID, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRatingsByService", reflect.TypeOf((*MockService)(nil).GetRatingsByService), ctx, serviceID, params)
}

// GetReviewByID mocks base method.
func (m *MockService) GetReviewByID(ctx context.Context, reviewID uuid.UUID) (model.Review, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReviewByID", ctx, reviewID)
	ret0, _ := ret[0].(model.Review)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReviewByID indicates an expected call of GetReviewByID.
func (mr *MockServiceMockRecorder) GetReviewByID(ctx, reviewID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReviewByID", reflect.TypeOf((*MockService)(nil).GetReviewByID), ctx, reviewID)
}

// GetReviewsByService mocks base method.
func (m *MockService) GetReviewsByService(ctx context.Context, serviceID uuid.UUID, params pagination.Params) ([]model.Review, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReviewsByService", ctx, serviceID, params)
	ret0, _ := ret[0].([]model.Review)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetReviewsByService indicates an expected call of GetReviewsByService.
func (mr *MockServiceMockRecorder) GetReviewsByService(ctx, serviceID, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReviewsByService", reflect.TypeOf((*MockService)(nil).GetReviewsByService), ctx, serviceID, params)
}